evaluationDependsOn(':openTCS-API-Base')
evaluationDependsOn(':openTCS-API-Injection')
evaluationDependsOn(':openTCS-Common')
evaluationDependsOn(':openTCS-Kernel')
evaluationDependsOn(':openTCS-PlantOverview')

apply plugin: 'distribution'
// To use AsciiDoctor for documentation
apply plugin: 'org.asciidoctor.convert'

def baseApiDir = file("$buildDir/api-base")
def injectionApiDir = file("$buildDir/api-injection")
def schemasDir = file("$buildDir/schemagen")
def samplesDir = file("$buildDir/samples")
def userManualDir = file("$buildDir/users-guide")
def devManualDir = file("$buildDir/developers-guide")
def devManualImagesDir = file("$devManualDir/images")
def readmeDir = file("$buildDir/readme")

ext.collectableDistDir = file("$buildDir/install")

configurations {
  schemagen
}

dependencies {
  compile project(':openTCS-Kernel')
  schemagen project(':openTCS-Kernel')
  schemagen project(':openTCS-PlantOverview')
  schemagen jar.outputs.files
}

distributions {
  main {
    contents.from(baseApiDir) {
      into('developer/api-base')
    }
    contents.from(injectionApiDir) {
      into('developer/api-injection')
    }
    contents.from(schemasDir) {
      into('developer/xml-schemas')
    }
    contents.from(devManualDir) {
      into('developer/developers-guide')
    }
    contents.from(userManualDir) {
      into('user')
    }
    contents.from(readmeDir)
  }
}

task renderDocs {
  dependsOn 'apiBase'
  dependsOn 'apiInjection'
  dependsOn 'schemagen'
  dependsOn 'asciidoctor'
}

installDist.dependsOn renderDocs
distTar.dependsOn renderDocs
distZip.dependsOn renderDocs

task release {
  dependsOn build
  dependsOn installDist
}

task apiBase(type: Javadoc, description: 'Creates Javadoc for base API.') {
  title = "openTCS ${project.version} Base API documentation"
  destinationDir = baseApiDir

  source = project(':openTCS-API-Base').sourceSets.main.allJava
  classpath = project(':openTCS-API-Base').sourceSets.main.compileClasspath
  options {
    header = "openTCS ${project.version}"
    footer = "openTCS ${project.version}"
    overview = "${project(':openTCS-API-Base').projectDir}/src/main/java/overview.html"
    group("Basic data structures", "org.opentcs.data*")
    group("Interfaces and supporting classes for accessing the kernel", "org.opentcs.access*")
    group("Kernel strategies, plant overview panels and other components", "org.opentcs.components*")
    group("Communication adapter framework", "org.opentcs.drivers*")
    group("Utility classes", "org.opentcs.util*")
  }
}

task apiInjection(type: Javadoc, description: 'Creates Javadoc for injection API.') {
  title = "openTCS ${project.version} Injection API documentation"
  destinationDir = injectionApiDir

  source = project(':openTCS-API-Injection').sourceSets.main.allJava
  classpath = project(':openTCS-API-Injection').sourceSets.main.compileClasspath
  options {
    header = "openTCS ${project.version}"
    footer = "openTCS ${project.version}"
    overview = "${project(':openTCS-API-Injection').projectDir}/src/main/java/overview.html"
    group("Classes supporting customization of openTCS applications", "org.opentcs.customizations*")
  }
}

asciidoctor {
  dependsOn 'asciidoctorUsersGuide'
  dependsOn 'asciidoctorDevelopersGuide'
  dependsOn 'asciidoctorReadme'
  enabled = false
}

task asciidoctorUsersGuide(type: org.asciidoctor.gradle.AsciidoctorTask) {
  // Document type: article (default), book, inline, manpage)
  options doctype: 'book'

  // Where to look for AsciiDoc files. Default: src/docs/asciidoc
  sourceDir = file("src/docs/users-guide")
  
  // Where to put the rendered documents. Default: $buildDir/asciidoc.
  outputDir = userManualDir
  
  // Whether to put backends' outputs into separate subdirectories  
  separateOutputDirs = false
	
  sources {
    include 'opentcs-users-guide.adoc'
  }
  
  // Set the backends the processor should use: html5 (default), docbook, manpage, pdf, deckjs
	backends = ['html5', 'pdf']

  attributes 'source-highlighter': 'coderay',
             'coderay-linenums-mode': 'table',
             'imagesdir': 'images',
  // The directory where the theme file is located
             'pdf-stylesdir': 'themes',
  // The name of the YAML theme file to load. If the name ends with ".yml", it's
  // assumed to be the complete name of the file. Otherwise, "-theme.yml" is appended
  // to the name to make the file name.
             'pdf-style': 'custom',
  // Include a table of contents (on the left side, when rendering to HTML)
  toc: 'left',
  toclevels: '3',
  // Turn on section numbering.
  sectnums: '1',
  // Depth of section numbering
  sectnumlevels: '6',
  // Whether to use icons for admonitions. Possible values: 'font' to use
  // FontAwesome glyphs or anything else to use graphics files.
  // Note: FontAwesome requires internet connectivity for viewing the resulting
  // HTML output...
//  icons: '1',
  icons: 'font',
  // Where to find the icons. Default: ./images/icons.
  // iconsdir: './images/icons',
  // The type of the icons.
  // icontype: 'png',
  // Allow attributes in links (target="_blank" etc.) to be used.
  linkattrs: true,
  // Document encoding.
  encoding: 'utf-8',
  // Render page numbers in the PDF
  pagenums: '1',
  // Experimental features (rendering keyboard shortcuts, menu items, etc.)
  experimental: true

  resources {
    from(sourceDir) {
      include '**/*.jpg'
      include '**/*.png'
      include '**/*.svg'
      exclude 'samples'
      exclude 'themes'
    }
  }
}

task asciidoctorReadme(type: org.asciidoctor.gradle.AsciidoctorTask) {
  // Document type: article (default), book, inline, manpage)
  options doctype: 'book'

  // Where to look for AsciiDoc files. Default: src/docs/asciidoc
  sourceDir = file("src/docs/readme")
  
  // Where to put the rendered documents. Default: $buildDir/asciidoc.
  outputDir = readmeDir
  
  // Whether to put backends' outputs into separate subdirectories  
  separateOutputDirs = false
	
  sources {
    include 'README.adoc'
  }
  
  // Set the backends the processor should use: html5 (default), docbook, manpage, pdf, deckjs
	backends = ['html5']
	
  attributes 'source-highlighter': 'coderay',
             'coderay-linenums-mode': 'table',
  //           'imagesdir': 'images',
  // Include a table of contents (on the left side, when rendering to HTML)
  toc: 'left',
  toclevels: '3',
  // Turn on section numbering.
  sectnums: '1',
  // Whether to use icons for admonitions. Possible values: 'font' to use
  // FontAwesome glyphs or anything else to use graphics files.
  // Note: FontAwesome requires internet connectivity for viewing the resulting
  // HTML output...
//  icons: '1',
  icons: 'font',
  // Where to find the icons. Default: ./images/icons.
  // iconsdir: './images/icons',
  // The type of the icons.
  // icontype: 'png',
  // Allow attributes in links (target="_blank" etc.) to be used.
  linkattrs: true,
  // Document encoding.
  encoding: 'utf-8',
  // Render page numbers in the PDF
  pagenums: '1',
  // Experimental features (rendering keyboard shortcuts, menu items, etc.)
  experimental: true
}

task asciidoctorDevelopersGuide(type: org.asciidoctor.gradle.AsciidoctorTask) {
  dependsOn 'samplesgen'
  
  // Document type: article (default), book, inline, manpage)
  options doctype: 'book'

  // Where to look for AsciiDoc files. Default: src/docs/asciidoc
  sourceDir = file("src/docs/developers-guide")
  
  // Where to put the rendered documents. Default: $buildDir/asciidoc.
  outputDir = devManualDir
  
  // Whether to put backends' outputs into separate subdirectories  
  separateOutputDirs = false
	
  sources {
    include 'opentcs-developers-guide.adoc'
  }
  
  // Set the backends the processor should use: html5 (default), docbook, manpage, pdf, deckjs
	backends = ['html5', 'pdf']
	
  requires 'asciidoctor-diagram'
  
  attributes 'source-highlighter': 'coderay',
             'coderay-linenums-mode': 'table',
             'base-javaSrc': project(':openTCS-API-Base').javaSrcDir,
             'base-testSrc': project(':openTCS-API-Base').testSrcDir,
             'kernel-javaSrc': project(':openTCS-Kernel').javaSrcDir,
             'kernel-guiceSrc': project(':openTCS-Kernel').guiceSrcDir,
             'kernel-testSrc': project(':openTCS-Kernel').testSrcDir,
             'plantoverview-javaSrc': project(':openTCS-PlantOverview').javaSrcDir,
             'plantoverview-guiceSrc': project(':openTCS-PlantOverview').guiceSrcDir,
             'plantoverview-testSrc': project(':openTCS-PlantOverview').testSrcDir,
             'imagesoutdir': devManualImagesDir, // Set the images directory for the output of asciidoctor-diagram
             'samples': samplesDir,
  // 'imagesdir': 'images',
  // Include a table of contents (on the left side, when rendering to HTML)
  toc: 'left',
  toclevels: '3',
  // Turn on section numbering.
  sectnums: '1',
  // Whether to use icons for admonitions. Possible values: 'font' to use
  // FontAwesome glyphs or anything else to use graphics files.
  // Note: FontAwesome requires internet connectivity for viewing the resulting
  // HTML output...
//  icons: '1',
  icons: 'font',
  // Where to find the icons. Default: ./images/icons.
  // iconsdir: './images/icons',
  // The type of the icons.
  // icontype: 'png',
  // Allow attributes in links (target="_blank" etc.) to be used.
  linkattrs: true,
  // Document encoding.
  encoding: 'utf-8',
  // Render page numbers in the PDF
  pagenums: '1',
  // Experimental features (rendering keyboard shortcuts, menu items, etc.)
  experimental: true
  
  resources {
    from(sourceDir) {
      include '**/*.png'
      exclude 'samples'
    }
  }
  
  doLast{
    delete "$devManualDir/.asciidoctor"
  }
}

task schemagen {
  dependsOn 'jar'
  dependsOn ':openTCS-Kernel:jar'
  dependsOn ':openTCS-PlantOverview:jar'

  File schemagenDir = schemasDir

  project(':openTCS-Kernel').sourceSets*.allSource*.srcDirs*.each { File srcDir ->
    inputs.dir srcDir
  }
  project(':openTCS-PlantOverview').sourceSets*.allSource*.srcDirs*.each { File srcDir ->
    inputs.dir srcDir
  }
  outputs.dir schemagenDir

  doLast {
    mkdir(schemagenDir)
    
    javaexec {
      classpath configurations.schemagen
      main = "org.opentcs.documentation.JAXBSchemaGenerator"
      args = [ "${schemagenDir}/opentcs-host-order.xsd",
             "org.opentcs.kernel.xmlorders.binding.TCSOrderSet",
             "org.opentcs.kernel.xmlorders.binding.Transport",
             "org.opentcs.kernel.xmlorders.binding.TransportScript" ]
    }
    javaexec {
      classpath configurations.schemagen
      main = "org.opentcs.documentation.JAXBSchemaGenerator"
      args = [ "${schemagenDir}/opentcs-host-orderscript.xsd",
             "org.opentcs.kernel.xmlorders.binding.TCSScriptFile",
             "org.opentcs.kernel.xmlorders.binding.Transport",
             "org.opentcs.kernel.xmlorders.binding.TransportScript" ]
    }
    javaexec {
      classpath configurations.schemagen
      main = "org.opentcs.documentation.JAXBSchemaGenerator"
      args = [ "${schemagenDir}/opentcs-host-response.xsd",
             "org.opentcs.kernel.xmlorders.binding.TCSResponseSet",
             "org.opentcs.kernel.xmlorders.binding.TransportResponse",
             "org.opentcs.kernel.xmlorders.binding.ScriptResponse" ]
    }
    javaexec {
      classpath configurations.schemagen
      main = "org.opentcs.documentation.JAXBSchemaGenerator"
      args = [ "${schemagenDir}/opentcs-host-statuschannel.xsd",
             "org.opentcs.kernel.xmlstatus.binding.TCSStatusMessageSet",
             "org.opentcs.kernel.xmlstatus.binding.OrderStatusMessage",
             "org.opentcs.kernel.xmlstatus.binding.VehicleStatusMessage" ]
    }
    javaexec {
      classpath configurations.schemagen
      main = "org.opentcs.documentation.JAXBSchemaGenerator"
      args = [ "${schemagenDir}/opentcs-plantoverview-persistence.xsd",
             "org.opentcs.guing.persistence.CourseModel",
             "org.opentcs.guing.persistence.CourseElement",
             "org.opentcs.guing.persistence.CourseObjectProperty",
             "org.opentcs.guing.persistence.KeyValueSetListWrapper" ]
    }
  }
}

task samplesgen {
  dependsOn 'jar'
  doLast {
    mkdir(samplesDir)
    //Args contains a tupel of (task-name, outputFile)
    javaexec {
      classpath configurations.runtime, jar.outputs.files
      main = "org.opentcs.documentation.SamplesGenerator"
      args "TELEGRAM_TWO_ORDERS", "${samplesDir}/xml-telegram-two-orders.xml"
    }
    
    javaexec {
      classpath configurations.runtime, jar.outputs.files
      main = 'org.opentcs.documentation.SamplesGenerator'
      args "TELEGRAM_STATUS", "${samplesDir}/xml-telegram-status.xml"
    }
    
    javaexec {
      classpath configurations.runtime, jar.outputs.files
      main = 'org.opentcs.documentation.SamplesGenerator'
      args "TELEGRAM_RECEIPT_ORDERS", "${samplesDir}/xml-telegram-receipt-orders.xml"
    }
    
    javaexec {
      classpath configurations.runtime, jar.outputs.files
      main = 'org.opentcs.documentation.SamplesGenerator'
      args "TELEGRAM_RECEIPT_BATCH", "${samplesDir}/xml-telegram-receipt-batch.xml"
    }
    
    javaexec {
      classpath configurations.runtime, jar.outputs.files
      main = 'org.opentcs.documentation.SamplesGenerator'
      args "TELEGRAM_BATCH", "${samplesDir}/xml-telegram-batch.xml"
    }
  }
}
